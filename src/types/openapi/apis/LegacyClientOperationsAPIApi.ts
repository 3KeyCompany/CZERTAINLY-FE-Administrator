// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 1.5.1-SNAPSHOT
 * Contact: getinfo@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    AuthenticationServiceExceptionDto,
    ClientAddEndEntityRequestDto,
    ClientCertificateRevocationDto,
    ClientCertificateSignRequestDto,
    ClientCertificateSignResponseDto,
    ClientEditEndEntityRequestDto,
    ClientEndEntityDto,
    ErrorMessageDto,
} from '../models';

export interface AddEndEntityRequest {
    raProfileName: string;
    clientAddEndEntityRequestDto: ClientAddEndEntityRequestDto;
}

export interface EditEndEntityRequest {
    raProfileName: string;
    username: string;
    clientEditEndEntityRequestDto: ClientEditEndEntityRequestDto;
}

export interface GetEndEntityRequest {
    raProfileName: string;
    username: string;
}

export interface IssueCertificate1Request {
    raProfileName: string;
    clientCertificateSignRequestDto: ClientCertificateSignRequestDto;
}

export interface ListEntitiesRequest {
    raProfileName: string;
}

export interface ResetPasswordRequest {
    raProfileName: string;
    username: string;
}

export interface RevokeAndDeleteEndEntityRequest {
    raProfileName: string;
    username: string;
}

export interface RevokeCertificate1Request {
    raProfileName: string;
    clientCertificateRevocationDto: ClientCertificateRevocationDto;
}

/**
 * no description
 */
export class LegacyClientOperationsAPIApi extends BaseAPI {

    /**
     * Add End Entity
     */
    addEndEntity({ raProfileName, clientAddEndEntityRequestDto }: AddEndEntityRequest): Observable<void>
    addEndEntity({ raProfileName, clientAddEndEntityRequestDto }: AddEndEntityRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    addEndEntity({ raProfileName, clientAddEndEntityRequestDto }: AddEndEntityRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'addEndEntity');
        throwIfNullOrUndefined(clientAddEndEntityRequestDto, 'clientAddEndEntityRequestDto', 'addEndEntity');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/operations/{raProfileName}/endentity'.replace('{raProfileName}', encodeURI(raProfileName)),
            method: 'POST',
            headers,
            body: clientAddEndEntityRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Edit End Entity
     */
    editEndEntity({ raProfileName, username, clientEditEndEntityRequestDto }: EditEndEntityRequest): Observable<void>
    editEndEntity({ raProfileName, username, clientEditEndEntityRequestDto }: EditEndEntityRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    editEndEntity({ raProfileName, username, clientEditEndEntityRequestDto }: EditEndEntityRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'editEndEntity');
        throwIfNullOrUndefined(username, 'username', 'editEndEntity');
        throwIfNullOrUndefined(clientEditEndEntityRequestDto, 'clientEditEndEntityRequestDto', 'editEndEntity');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/operations/{raProfileName}/endentity/{username}'.replace('{raProfileName}', encodeURI(raProfileName)).replace('{username}', encodeURI(username)),
            method: 'POST',
            headers,
            body: clientEditEndEntityRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Get End Entity information
     */
    getEndEntity({ raProfileName, username }: GetEndEntityRequest): Observable<ClientEndEntityDto>
    getEndEntity({ raProfileName, username }: GetEndEntityRequest, opts?: OperationOpts): Observable<AjaxResponse<ClientEndEntityDto>>
    getEndEntity({ raProfileName, username }: GetEndEntityRequest, opts?: OperationOpts): Observable<ClientEndEntityDto | AjaxResponse<ClientEndEntityDto>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'getEndEntity');
        throwIfNullOrUndefined(username, 'username', 'getEndEntity');

        return this.request<ClientEndEntityDto>({
            url: '/v1/operations/{raProfileName}/endentity/{username}'.replace('{raProfileName}', encodeURI(raProfileName)).replace('{username}', encodeURI(username)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Issue Certificate
     */
    issueCertificate1({ raProfileName, clientCertificateSignRequestDto }: IssueCertificate1Request): Observable<ClientCertificateSignResponseDto>
    issueCertificate1({ raProfileName, clientCertificateSignRequestDto }: IssueCertificate1Request, opts?: OperationOpts): Observable<AjaxResponse<ClientCertificateSignResponseDto>>
    issueCertificate1({ raProfileName, clientCertificateSignRequestDto }: IssueCertificate1Request, opts?: OperationOpts): Observable<ClientCertificateSignResponseDto | AjaxResponse<ClientCertificateSignResponseDto>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'issueCertificate1');
        throwIfNullOrUndefined(clientCertificateSignRequestDto, 'clientCertificateSignRequestDto', 'issueCertificate1');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ClientCertificateSignResponseDto>({
            url: '/v1/operations/{raProfileName}/certificate/issue'.replace('{raProfileName}', encodeURI(raProfileName)),
            method: 'POST',
            headers,
            body: clientCertificateSignRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * List all End Entities
     */
    listEntities({ raProfileName }: ListEntitiesRequest): Observable<Array<ClientEndEntityDto>>
    listEntities({ raProfileName }: ListEntitiesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<ClientEndEntityDto>>>
    listEntities({ raProfileName }: ListEntitiesRequest, opts?: OperationOpts): Observable<Array<ClientEndEntityDto> | AjaxResponse<Array<ClientEndEntityDto>>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'listEntities');

        return this.request<Array<ClientEndEntityDto>>({
            url: '/v1/operations/{raProfileName}/endentity'.replace('{raProfileName}', encodeURI(raProfileName)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Reset password for End Entity
     */
    resetPassword({ raProfileName, username }: ResetPasswordRequest): Observable<void>
    resetPassword({ raProfileName, username }: ResetPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    resetPassword({ raProfileName, username }: ResetPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'resetPassword');
        throwIfNullOrUndefined(username, 'username', 'resetPassword');

        return this.request<void>({
            url: '/v1/operations/{raProfileName}/endentity/{username}/resetPassword'.replace('{raProfileName}', encodeURI(raProfileName)).replace('{username}', encodeURI(username)),
            method: 'PUT',
        }, opts?.responseOpts);
    };

    /**
     * Revoke all Certificates and delete End Entity
     */
    revokeAndDeleteEndEntity({ raProfileName, username }: RevokeAndDeleteEndEntityRequest): Observable<void>
    revokeAndDeleteEndEntity({ raProfileName, username }: RevokeAndDeleteEndEntityRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    revokeAndDeleteEndEntity({ raProfileName, username }: RevokeAndDeleteEndEntityRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'revokeAndDeleteEndEntity');
        throwIfNullOrUndefined(username, 'username', 'revokeAndDeleteEndEntity');

        return this.request<void>({
            url: '/v1/operations/{raProfileName}/endentity/{username}'.replace('{raProfileName}', encodeURI(raProfileName)).replace('{username}', encodeURI(username)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Revoke Certificate
     */
    revokeCertificate1({ raProfileName, clientCertificateRevocationDto }: RevokeCertificate1Request): Observable<void>
    revokeCertificate1({ raProfileName, clientCertificateRevocationDto }: RevokeCertificate1Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    revokeCertificate1({ raProfileName, clientCertificateRevocationDto }: RevokeCertificate1Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(raProfileName, 'raProfileName', 'revokeCertificate1');
        throwIfNullOrUndefined(clientCertificateRevocationDto, 'clientCertificateRevocationDto', 'revokeCertificate1');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/operations/{raProfileName}/certificate/revoke'.replace('{raProfileName}', encodeURI(raProfileName)),
            method: 'POST',
            headers,
            body: clientCertificateRevocationDto,
        }, opts?.responseOpts);
    };

}
