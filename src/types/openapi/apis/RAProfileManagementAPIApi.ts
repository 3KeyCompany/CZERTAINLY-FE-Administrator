// tslint:disable
/**
 * CZERTAINLY Core API
 * REST API for CZERTAINLY Core
 *
 * The version of the OpenAPI document: 1.5.1-SNAPSHOT
 * Contact: getinfo@czertainly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ActivateAcmeForRaProfileRequestDto,
    AddRaProfileRequestDto,
    AuthenticationServiceExceptionDto,
    EditRaProfileRequestDto,
    ErrorMessageDto,
    ListLocationAttributes200ResponseInner,
    RaProfileAcmeDetailResponseDto,
    RaProfileDto,
    SimplifiedComplianceProfileDto,
    UuidDto,
} from '../models';

export interface ActivateAcmeForRaProfileRequest {
    authorityUuid: string;
    raProfileUuid: string;
    acmeProfileUuid: string;
    activateAcmeForRaProfileRequestDto: ActivateAcmeForRaProfileRequestDto;
}

export interface BulkDeleteRaProfileRequest {
    requestBody: Array<string>;
}

export interface BulkDisableRaProfileRequest {
    requestBody: Array<string>;
}

export interface BulkEnableRaProfileRequest {
    requestBody: Array<string>;
}

export interface CheckComplianceRequest {
    requestBody: Array<string>;
}

export interface CreateRaProfileRequest {
    authorityUuid: string;
    addRaProfileRequestDto: AddRaProfileRequestDto;
}

export interface DeactivateAcmeForRaProfileRequest {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface DeleteRaProfileRequest {
    raProfileUuid: string;
}

export interface DeleteRaProfile1Request {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface DisableRaProfileRequest {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface EditRaProfileRequest {
    authorityUuid: string;
    raProfileUuid: string;
    editRaProfileRequestDto: EditRaProfileRequestDto;
}

export interface EnableRaProfileRequest {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface GetAcmeForRaProfileRequest {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface GetAssociatedComplianceProfilesRequest {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface GetRaProfileRequest {
    raProfileUuid: string;
}

export interface GetRaProfile1Request {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface ListIssueCertificateAttributes1Request {
    authorityUuid: string;
    raProfileUuid: string;
}

export interface ListRaProfilesRequest {
    enabled?: boolean;
}

export interface ListRevokeCertificateAttributes1Request {
    authorityUuid: string;
    raProfileUuid: string;
}

/**
 * no description
 */
export class RAProfileManagementAPIApi extends BaseAPI {

    /**
     * Activate ACME for RA Profile
     */
    activateAcmeForRaProfile({ authorityUuid, raProfileUuid, acmeProfileUuid, activateAcmeForRaProfileRequestDto }: ActivateAcmeForRaProfileRequest): Observable<RaProfileAcmeDetailResponseDto>
    activateAcmeForRaProfile({ authorityUuid, raProfileUuid, acmeProfileUuid, activateAcmeForRaProfileRequestDto }: ActivateAcmeForRaProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<RaProfileAcmeDetailResponseDto>>
    activateAcmeForRaProfile({ authorityUuid, raProfileUuid, acmeProfileUuid, activateAcmeForRaProfileRequestDto }: ActivateAcmeForRaProfileRequest, opts?: OperationOpts): Observable<RaProfileAcmeDetailResponseDto | AjaxResponse<RaProfileAcmeDetailResponseDto>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'activateAcmeForRaProfile');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'activateAcmeForRaProfile');
        throwIfNullOrUndefined(acmeProfileUuid, 'acmeProfileUuid', 'activateAcmeForRaProfile');
        throwIfNullOrUndefined(activateAcmeForRaProfileRequestDto, 'activateAcmeForRaProfileRequestDto', 'activateAcmeForRaProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RaProfileAcmeDetailResponseDto>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/acme/activate/{acmeProfileUuid}'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)).replace('{acmeProfileUuid}', encodeURI(acmeProfileUuid)),
            method: 'PATCH',
            headers,
            body: activateAcmeForRaProfileRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Delete multiple RA Profiles
     */
    bulkDeleteRaProfile({ requestBody }: BulkDeleteRaProfileRequest): Observable<void>
    bulkDeleteRaProfile({ requestBody }: BulkDeleteRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    bulkDeleteRaProfile({ requestBody }: BulkDeleteRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'bulkDeleteRaProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/raProfiles',
            method: 'DELETE',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Disable multiple RA Profiles
     */
    bulkDisableRaProfile({ requestBody }: BulkDisableRaProfileRequest): Observable<void>
    bulkDisableRaProfile({ requestBody }: BulkDisableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    bulkDisableRaProfile({ requestBody }: BulkDisableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'bulkDisableRaProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/raProfiles/disable',
            method: 'PATCH',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Enable multiple RA Profiles
     */
    bulkEnableRaProfile({ requestBody }: BulkEnableRaProfileRequest): Observable<void>
    bulkEnableRaProfile({ requestBody }: BulkEnableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    bulkEnableRaProfile({ requestBody }: BulkEnableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'bulkEnableRaProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/raProfiles/enable',
            method: 'PATCH',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Certificate Compliance Check
     */
    checkCompliance({ requestBody }: CheckComplianceRequest): Observable<void>
    checkCompliance({ requestBody }: CheckComplianceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    checkCompliance({ requestBody }: CheckComplianceRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(requestBody, 'requestBody', 'checkCompliance');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/v1/raProfiles/compliance',
            method: 'POST',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     * Create RA Profile
     */
    createRaProfile({ authorityUuid, addRaProfileRequestDto }: CreateRaProfileRequest): Observable<UuidDto>
    createRaProfile({ authorityUuid, addRaProfileRequestDto }: CreateRaProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<UuidDto>>
    createRaProfile({ authorityUuid, addRaProfileRequestDto }: CreateRaProfileRequest, opts?: OperationOpts): Observable<UuidDto | AjaxResponse<UuidDto>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'createRaProfile');
        throwIfNullOrUndefined(addRaProfileRequestDto, 'addRaProfileRequestDto', 'createRaProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<UuidDto>({
            url: '/v1/authorities/{authorityUuid}/raProfiles'.replace('{authorityUuid}', encodeURI(authorityUuid)),
            method: 'POST',
            headers,
            body: addRaProfileRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Deactivate ACME for RA Profile
     */
    deactivateAcmeForRaProfile({ authorityUuid, raProfileUuid }: DeactivateAcmeForRaProfileRequest): Observable<void>
    deactivateAcmeForRaProfile({ authorityUuid, raProfileUuid }: DeactivateAcmeForRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deactivateAcmeForRaProfile({ authorityUuid, raProfileUuid }: DeactivateAcmeForRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'deactivateAcmeForRaProfile');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'deactivateAcmeForRaProfile');

        return this.request<void>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/acme/deactivate'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Delete RA Profile
     */
    deleteRaProfile({ raProfileUuid }: DeleteRaProfileRequest): Observable<void>
    deleteRaProfile({ raProfileUuid }: DeleteRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteRaProfile({ raProfileUuid }: DeleteRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'deleteRaProfile');

        return this.request<void>({
            url: '/v1/raProfiles/{raProfileUuid}'.replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Delete RA Profile
     */
    deleteRaProfile1({ authorityUuid, raProfileUuid }: DeleteRaProfile1Request): Observable<void>
    deleteRaProfile1({ authorityUuid, raProfileUuid }: DeleteRaProfile1Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteRaProfile1({ authorityUuid, raProfileUuid }: DeleteRaProfile1Request, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'deleteRaProfile1');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'deleteRaProfile1');

        return this.request<void>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Disable RA Profiles
     */
    disableRaProfile({ authorityUuid, raProfileUuid }: DisableRaProfileRequest): Observable<void>
    disableRaProfile({ authorityUuid, raProfileUuid }: DisableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    disableRaProfile({ authorityUuid, raProfileUuid }: DisableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'disableRaProfile');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'disableRaProfile');

        return this.request<void>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/disable'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Edit RA Profile
     */
    editRaProfile({ authorityUuid, raProfileUuid, editRaProfileRequestDto }: EditRaProfileRequest): Observable<RaProfileDto>
    editRaProfile({ authorityUuid, raProfileUuid, editRaProfileRequestDto }: EditRaProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<RaProfileDto>>
    editRaProfile({ authorityUuid, raProfileUuid, editRaProfileRequestDto }: EditRaProfileRequest, opts?: OperationOpts): Observable<RaProfileDto | AjaxResponse<RaProfileDto>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'editRaProfile');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'editRaProfile');
        throwIfNullOrUndefined(editRaProfileRequestDto, 'editRaProfileRequestDto', 'editRaProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RaProfileDto>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'PUT',
            headers,
            body: editRaProfileRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Enable RA Profiles
     */
    enableRaProfile({ authorityUuid, raProfileUuid }: EnableRaProfileRequest): Observable<void>
    enableRaProfile({ authorityUuid, raProfileUuid }: EnableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    enableRaProfile({ authorityUuid, raProfileUuid }: EnableRaProfileRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'enableRaProfile');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'enableRaProfile');

        return this.request<void>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/enable'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'PATCH',
        }, opts?.responseOpts);
    };

    /**
     * Get ACME details for RA Profile
     */
    getAcmeForRaProfile({ authorityUuid, raProfileUuid }: GetAcmeForRaProfileRequest): Observable<RaProfileAcmeDetailResponseDto>
    getAcmeForRaProfile({ authorityUuid, raProfileUuid }: GetAcmeForRaProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<RaProfileAcmeDetailResponseDto>>
    getAcmeForRaProfile({ authorityUuid, raProfileUuid }: GetAcmeForRaProfileRequest, opts?: OperationOpts): Observable<RaProfileAcmeDetailResponseDto | AjaxResponse<RaProfileAcmeDetailResponseDto>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'getAcmeForRaProfile');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'getAcmeForRaProfile');

        return this.request<RaProfileAcmeDetailResponseDto>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/acme'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get Compliance Profiles for an RA Profile
     */
    getAssociatedComplianceProfiles({ authorityUuid, raProfileUuid }: GetAssociatedComplianceProfilesRequest): Observable<Array<SimplifiedComplianceProfileDto>>
    getAssociatedComplianceProfiles({ authorityUuid, raProfileUuid }: GetAssociatedComplianceProfilesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SimplifiedComplianceProfileDto>>>
    getAssociatedComplianceProfiles({ authorityUuid, raProfileUuid }: GetAssociatedComplianceProfilesRequest, opts?: OperationOpts): Observable<Array<SimplifiedComplianceProfileDto> | AjaxResponse<Array<SimplifiedComplianceProfileDto>>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'getAssociatedComplianceProfiles');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'getAssociatedComplianceProfiles');

        return this.request<Array<SimplifiedComplianceProfileDto>>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/complianceProfiles'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Details of RA Profile
     */
    getRaProfile({ raProfileUuid }: GetRaProfileRequest): Observable<RaProfileDto>
    getRaProfile({ raProfileUuid }: GetRaProfileRequest, opts?: OperationOpts): Observable<AjaxResponse<RaProfileDto>>
    getRaProfile({ raProfileUuid }: GetRaProfileRequest, opts?: OperationOpts): Observable<RaProfileDto | AjaxResponse<RaProfileDto>> {
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'getRaProfile');

        return this.request<RaProfileDto>({
            url: '/v1/raProfiles/{raProfileUuid}'.replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Details of RA Profile
     */
    getRaProfile1({ authorityUuid, raProfileUuid }: GetRaProfile1Request): Observable<RaProfileDto>
    getRaProfile1({ authorityUuid, raProfileUuid }: GetRaProfile1Request, opts?: OperationOpts): Observable<AjaxResponse<RaProfileDto>>
    getRaProfile1({ authorityUuid, raProfileUuid }: GetRaProfile1Request, opts?: OperationOpts): Observable<RaProfileDto | AjaxResponse<RaProfileDto>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'getRaProfile1');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'getRaProfile1');

        return this.request<RaProfileDto>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get issue Certificate Attributes
     */
    listIssueCertificateAttributes1({ authorityUuid, raProfileUuid }: ListIssueCertificateAttributes1Request): Observable<Array<ListLocationAttributes200ResponseInner>>
    listIssueCertificateAttributes1({ authorityUuid, raProfileUuid }: ListIssueCertificateAttributes1Request, opts?: OperationOpts): Observable<AjaxResponse<Array<ListLocationAttributes200ResponseInner>>>
    listIssueCertificateAttributes1({ authorityUuid, raProfileUuid }: ListIssueCertificateAttributes1Request, opts?: OperationOpts): Observable<Array<ListLocationAttributes200ResponseInner> | AjaxResponse<Array<ListLocationAttributes200ResponseInner>>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'listIssueCertificateAttributes1');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'listIssueCertificateAttributes1');

        return this.request<Array<ListLocationAttributes200ResponseInner>>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * List of available RA Profiles
     */
    listRaProfiles({ enabled }: ListRaProfilesRequest): Observable<Array<RaProfileDto>>
    listRaProfiles({ enabled }: ListRaProfilesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<RaProfileDto>>>
    listRaProfiles({ enabled }: ListRaProfilesRequest, opts?: OperationOpts): Observable<Array<RaProfileDto> | AjaxResponse<Array<RaProfileDto>>> {

        const query: HttpQuery = {};

        if (enabled != null) { query['enabled'] = enabled; }

        return this.request<Array<RaProfileDto>>({
            url: '/v1/raProfiles',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get revocation Attributes
     */
    listRevokeCertificateAttributes1({ authorityUuid, raProfileUuid }: ListRevokeCertificateAttributes1Request): Observable<Array<ListLocationAttributes200ResponseInner>>
    listRevokeCertificateAttributes1({ authorityUuid, raProfileUuid }: ListRevokeCertificateAttributes1Request, opts?: OperationOpts): Observable<AjaxResponse<Array<ListLocationAttributes200ResponseInner>>>
    listRevokeCertificateAttributes1({ authorityUuid, raProfileUuid }: ListRevokeCertificateAttributes1Request, opts?: OperationOpts): Observable<Array<ListLocationAttributes200ResponseInner> | AjaxResponse<Array<ListLocationAttributes200ResponseInner>>> {
        throwIfNullOrUndefined(authorityUuid, 'authorityUuid', 'listRevokeCertificateAttributes1');
        throwIfNullOrUndefined(raProfileUuid, 'raProfileUuid', 'listRevokeCertificateAttributes1');

        return this.request<Array<ListLocationAttributes200ResponseInner>>({
            url: '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke'.replace('{authorityUuid}', encodeURI(authorityUuid)).replace('{raProfileUuid}', encodeURI(raProfileUuid)),
            method: 'GET',
        }, opts?.responseOpts);
    };

}
